// File Name:REGFILE.v
// Author : Lisler Thomson Pulikkottil
// Version: Rev A
// Description : This porgram is used to store data into one of the registers from R1 to R7 using DSEL as select lines.
//			The data stored is then output using two buses A and B according to select lines ASEL and BSEL respectively.
// 		The operation is driven using a clock input.
// Date : 05/18/2019

module REGFILE(DSEL, ASEL, BSEL, RIN, CLK, A,B);

	input [2:0] DSEL; 					// Used to select registers
	input [2:0] ASEL, BSEL;				// used to select different output buses (A or B)
	input [2:0] RIN;						// Data stored in the register
	input CLK;								// Clock signal input
	output [2:0] A, B;					// Output Buses. This will be connected to LEDs to show output

	reg [2:0] A, B;
	wire [2:0] DSEL;
	reg [2:0] R[7:0];

	always @(negedge CLK)				// negedge is used as the push buttons are Active Low
	begin
	  case (~DSEL)							// The DSEL input is complemented as the pushbuttons are Active LOW
		 3'b000  : R[0] <= 3'b000;    // This is just a random value stored as we are not using R[0]
		 3'b001  : R[1] <= RIN;
		 3'b010  : R[2] <= RIN;
		 3'b011  : R[3] <= RIN;
		 3'b100  : R[4] <= RIN;
		 3'b101  : R[5] <= RIN;
		 3'b110  : R[6] <= RIN;
		 3'b111  : R[7] <= RIN; 
	  endcase
	end
	always @(negedge CLK)
	begin
	  case(ASEL)							// This Case statement assigns each register value to output A depending on ASEL value
		 3'b000  : A <= 3'b000;
		 3'b001  : A <= R[1];
		 3'b010  : A <= R[2];
		 3'b011  : A <= R[3];
		 3'b100  : A <= R[4];
		 3'b101  : A <= R[5];
		 3'b110  : A <= R[6];
		 3'b111  : A <= R[7]; 
	  endcase
	end
	always @(negedge CLK)
	begin
	  case(BSEL)							// This Case statement assigns each register value to output B depending on BSEL value
		 3'b000  : B <= 3'b000;
		 3'b001  : B <= R[1];
		 3'b010  : B <= R[2];
		 3'b011  : B <= R[3];
		 3'b100  : B <= R[4];
		 3'b101  : B <= R[5];
		 3'b110  : B <= R[6];
		 3'b111  : B <= R[7]; 
	  endcase
	end
	
endmodule
