
// File Name: recon.v
// Author   : Lisler Thomson Pulikkottil
// Version  : Rev A
// Description : This file functions as a topfile for the assignment. The inputs and outputs are declared in the file.
// Date : 05/28/2019

module ALU(SW, SSEL, F, HEX5);

	input [9:0] SW;												
	input [3:0] SSEL;									
	output [9:0] F;
	output [6:0] HEX5;

	reg [7:0] A, B; // Inputs
	reg[8:0]	F;  // Output
	wire [3:0] SSEL; // Function Select
	reg Z,C,V,S; // Status
	reg [6:0] HEX5; // Hex Output
	always @(*)
	begin
		A[7:4] <= SW[3:0];
		A[3] <= SW[0];
		A[2] <= SW[0];
		A[1] <= SW[0];
		A[0] <= SW[0];
		B[7:4] <= SW[7:4];
		B[3] <= SW[4];
		B[2] <= SW[4];
		B[1] <= SW[4];
		B[0] <= SW[4];


	end
	always @(A or B)				
	begin
		C <= 1'b0; // Initialize Carry Flag
		Z <= 1'b0; // Initialize Zero Flag
		S <= 1'b0; // Initialize Sign Flag
		V <= 1'b0; // Initialize Overflow Flag
		case (~SSEL)							
			4'b0000  :F <= A; // Transfer A 
			4'b0001  :F <= A + 1; // Increment A
			4'b0010  :F <= A + B; // Sum A, B
			4'b0011  : F <= 8'b0; // No Function
			4'b0100  : F <= 8'b0; // No Function
			4'b0101  : F <= A - B; // Subtract A, B
			4'b0110  : F <= A - 1; // Decrement A
			4'b0111  : begin  // Transfer A with Carry 0
							F <= A;
							C <=  1'b1;
						  end
			4'b1000  : F <= A & B;  // A AND B
			4'b1001  : F <= 8'b0;   // No Function
			4'b1010  : F <= A | B;  // A OR B
			4'b1011  : F <= 8'b0;   // No Function
			4'b1100  : F <= A ^ B;  // A XOR B
			4'b1101  : F <= 8'b0;   // No Function
			4'b1110  : F <= ~ A;    // Complement A
			4'b1111  : F <= 8'b0;   // No Function
		endcase

		if (F == 0)  // Zero Flag
			Z<= 1'b1;
		else
			Z<= 1'b0;

		if (F[7] == 1) // Sign Flag
			S <= 1'b1;
		else
			S <= 1'b0;


		if(F[8] == 1)  // Carry Flag
			C <= 1'b1;
		else
			C <= 1'b0;

		if ((A[7]==0) && (B[7]==0)) 					//Check for overflow flag
		begin
			if( F[7] == 1 )
				V <= 1'b1;
			else 
				V <= 1'b0;
		end 
		else
			begin
				if ((A[7]==1) && (B[7]==1)) 
				begin
					if (F[7] == 0) 
						V <= 1'b1;
					else 
						V <= 1'b0;
			end 
		end 
       // Mapping Status to the HEX display
		HEX5[0] <= 1'b1;
		HEX5[1] <= ~V;
		HEX5[2] <= ~C;
		HEX5[3] <= 1'b1;
		HEX5[4] <= ~S;
		HEX5[5] <= ~Z;
		HEX5[6] <= 1'b0;
	end
endmodule

